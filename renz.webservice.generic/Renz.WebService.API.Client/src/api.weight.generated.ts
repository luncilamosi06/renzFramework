/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('https://localhost:44361');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
    Bearer : string = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwidW5pcXVlX25hbWUiOiJybS51bWF5YW4iLCJlbWFpbCI6InJtLnVtYXlhbkByaXZ0ZWNoZ2xvYmFsLmNvbSIsImFnZW5jeV9pZCI6IjAiLCJzdWJhZ2VuY3lfaWQiOiIwIiwiY2Fycmllcl9jb2RlIjoiIiwiZXhwIjoxNjAxOTg0NzYxLCJpc3MiOiJodHRwOi8vd3d3LnJpdnRlY2hnbG9iYWwuY29tIn0.dEmTQiQ9TuJSbMb3Dl2JyxfpL7Ua53lou_659JOVAAk'

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44361";
    }

    /**
     * @return Success
     */
    itemAll(): Observable<ItemDTO[]> {
        let url_ = this.baseUrl + "/api/Item";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItemAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItemAll(<any>response_);
                } catch (e) {
                    return <Observable<ItemDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processItemAll(response: HttpResponseBase): Observable<ItemDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ItemDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    item(body: ItemDTO | undefined): Observable<ItemDTO> {
        let url_ = this.baseUrl + "/api/Item";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain",
                "Authorization": this.Bearer
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItem(<any>response_);
                } catch (e) {
                    return <Observable<ItemDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDTO>><any>_observableThrow(response_);
        }));
    }

    protected processItem(response: HttpResponseBase): Observable<ItemDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDTO>(<any>null);
    }

    /**
     * @return Success
     */
    item2(id: number): Observable<ItemDTO> {
        let url_ = this.baseUrl + "/api/Item/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItem2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItem2(<any>response_);
                } catch (e) {
                    return <Observable<ItemDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDTO>><any>_observableThrow(response_);
        }));
    }

    protected processItem2(response: HttpResponseBase): Observable<ItemDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    item3(id: number, body: ItemDTO | undefined): Observable<ItemDTO> {
        let url_ = this.baseUrl + "/api/Item/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain",
                "Authorization": this.Bearer
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItem3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItem3(<any>response_);
                } catch (e) {
                    return <Observable<ItemDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDTO>><any>_observableThrow(response_);
        }));
    }

    protected processItem3(response: HttpResponseBase): Observable<ItemDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDTO>(<any>null);
    }

    /**
     * @return Success
     */
    item4(id: number): Observable<ItemDTO> {
        let url_ = this.baseUrl + "/api/Item/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain",
                "Authorization": this.Bearer
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processItem4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processItem4(<any>response_);
                } catch (e) {
                    return <Observable<ItemDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ItemDTO>><any>_observableThrow(response_);
        }));
    }

    protected processItem4(response: HttpResponseBase): Observable<ItemDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ItemDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ItemDTO>(<any>null);
    }

    /**
     * @return Success
     */
    shapes(a: number, b: number, c: number, d: number): Observable<ShapeDTO> {
        let url_ = this.baseUrl + "/api/Shapes/{a}/{b}/{c}/{d}";
        if (a === undefined || a === null)
            throw new Error("The parameter 'a' must be defined.");
        url_ = url_.replace("{a}", encodeURIComponent("" + a));
        if (b === undefined || b === null)
            throw new Error("The parameter 'b' must be defined.");
        url_ = url_.replace("{b}", encodeURIComponent("" + b));
        if (c === undefined || c === null)
            throw new Error("The parameter 'c' must be defined.");
        url_ = url_.replace("{c}", encodeURIComponent("" + c));
        if (d === undefined || d === null)
            throw new Error("The parameter 'd' must be defined.");
        url_ = url_.replace("{d}", encodeURIComponent("" + d));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processShapes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processShapes(<any>response_);
                } catch (e) {
                    return <Observable<ShapeDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShapeDTO>><any>_observableThrow(response_);
        }));
    }

    protected processShapes(response: HttpResponseBase): Observable<ShapeDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShapeDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShapeDTO>(<any>null);
    }

    /**
     * @return Success
     */
    weightAll(): Observable<WeightDTO[]> {
        let url_ = this.baseUrl + "/api/Weight";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeightAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeightAll(<any>response_);
                } catch (e) {
                    return <Observable<WeightDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeightDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processWeightAll(response: HttpResponseBase): Observable<WeightDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeightDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeightDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    weight(body: WeightDTO | undefined): Observable<WeightDTO> {
        let url_ = this.baseUrl + "/api/Weight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeight(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeight(<any>response_);
                } catch (e) {
                    return <Observable<WeightDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeightDTO>><any>_observableThrow(response_);
        }));
    }

    protected processWeight(response: HttpResponseBase): Observable<WeightDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeightDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeightDTO>(<any>null);
    }

    /**
     * @return Success
     */
    weight2(id: number): Observable<WeightDTO> {
        let url_ = this.baseUrl + "/api/Weight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeight2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeight2(<any>response_);
                } catch (e) {
                    return <Observable<WeightDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeightDTO>><any>_observableThrow(response_);
        }));
    }

    protected processWeight2(response: HttpResponseBase): Observable<WeightDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeightDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeightDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    weight3(id: number, body: WeightDTO | undefined): Observable<WeightDTO> {
        let url_ = this.baseUrl + "/api/Weight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeight3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeight3(<any>response_);
                } catch (e) {
                    return <Observable<WeightDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeightDTO>><any>_observableThrow(response_);
        }));
    }

    protected processWeight3(response: HttpResponseBase): Observable<WeightDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeightDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeightDTO>(<any>null);
    }

    /**
     * @return Success
     */
    weight4(id: number): Observable<WeightDTO> {
        let url_ = this.baseUrl + "/api/Weight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeight4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeight4(<any>response_);
                } catch (e) {
                    return <Observable<WeightDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeightDTO>><any>_observableThrow(response_);
        }));
    }

    protected processWeight4(response: HttpResponseBase): Observable<WeightDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeightDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeightDTO>(<any>null);
    }
}

export class ItemDTO implements IItemDTO {
    name?: string | undefined;
    weight?: number;
    totalCost?: number;
    createdDate?: Date;
    id?: number;
    isActive?: boolean;

    constructor(data?: IItemDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.weight = _data["weight"];
            this.totalCost = _data["totalCost"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): ItemDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["weight"] = this.weight;
        data["totalCost"] = this.totalCost;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IItemDTO {
    name?: string | undefined;
    weight?: number;
    totalCost?: number;
    createdDate?: Date;
    id?: number;
    isActive?: boolean;
}

export class ShapeDTO implements IShapeDTO {
    triangle?: number;
    square?: number;
    rectangle?: number;
    circle?: number;

    constructor(data?: IShapeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.triangle = _data["triangle"];
            this.square = _data["square"];
            this.rectangle = _data["rectangle"];
            this.circle = _data["circle"];
        }
    }

    static fromJS(data: any): ShapeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ShapeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["triangle"] = this.triangle;
        data["square"] = this.square;
        data["rectangle"] = this.rectangle;
        data["circle"] = this.circle;
        return data; 
    }
}

export interface IShapeDTO {
    triangle?: number;
    square?: number;
    rectangle?: number;
    circle?: number;
}

export class WeightDTO implements IWeightDTO {
    priority?: string | undefined;
    type?: string | undefined;
    rule?: number;
    operator?: string | undefined;
    cost?: number;
    createdDate?: Date;
    id?: number;
    isActive?: boolean;

    constructor(data?: IWeightDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priority = _data["priority"];
            this.type = _data["type"];
            this.rule = _data["rule"];
            this.operator = _data["operator"];
            this.cost = _data["cost"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): WeightDTO {
        data = typeof data === 'object' ? data : {};
        let result = new WeightDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priority"] = this.priority;
        data["type"] = this.type;
        data["rule"] = this.rule;
        data["operator"] = this.operator;
        data["cost"] = this.cost;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IWeightDTO {
    priority?: string | undefined;
    type?: string | undefined;
    rule?: number;
    operator?: string | undefined;
    cost?: number;
    createdDate?: Date;
    id?: number;
    isActive?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}